' metaclass = MonoBehaviour
@startuml Enemy

enum StateType {
    Idle
    Wander
    Patrol
    Attack
    Chase
}

interface IStateData {
    +Transform transform
    +Target Target
    +RigidBody2D RB
    +Vector2 MoveDirection
    +float Speed
    +Animator Animator
}

abstract class State <<Serializable>>{
    +StateType _type
    -IStateData _stateSata
    +abstract Initialize(IStateData)
    +virtual Enter() 
    +virtual Update() 
    +virtual PhysicsUpdate() 
    +virtual Exit() 
}
State --> StateType

class StateMachine {
    +State CurrentState
    -Dictionary<StateType, State> _states
    +void AddState(StateType)
    +void ChangeState(StateType)
    +void Update()
    +void PhysicsUpdate()
}
StateMachine ..> SomeState1
StateMachine ..> SomeState2

class SomeState1 <<Serializable>> {
    <<SerializedField>> ConfigurableData 
}
SomeState1 <|.. State

class SomeState2 <<Serializable>> {
    <<SerializedField>> ConfigurableData 
}
SomeState2 <|.. State

class SomeEnemy {

}
note right of SomeEnemy : Enemy logic and call switch states
SomeEnemy --> StateMachine
SomeEnemy <|.. IStateData

@enduml